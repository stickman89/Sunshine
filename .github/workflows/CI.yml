name: CI

on:
  pull_request:
    branches: [master, nightly]
    types: [opened, synchronize, reopened]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  check_changelog:
    name: Check Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify Changelog
        id: verify_changelog
        if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
        # base_ref for pull request check, ref for push
        uses: SunshineStream/actions/verify_changelog@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      next_version: ${{ steps.verify_changelog.outputs.changelog_parser_version }}
      next_version_bare: ${{ steps.verify_changelog.outputs.changelog_parser_version_bare }}
      last_version: ${{ steps.verify_changelog.outputs.latest_release_tag_name }}
      release_body: ${{ steps.verify_changelog.outputs.changelog_parser_description }}

  check_versions:
    name: Check Versions
    runs-on: ubuntu-latest
    needs: check_changelog
    if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
    # base_ref for pull request check, ref for push
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check CMakeLists.txt Version
        run: |
          version=$(grep -o -E '^project\(Sunshine VERSION [0-9]+\.[0-9]+\.[0-9]+\)' CMakeLists.txt | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
          echo "cmakelists_version=${version}" >> $GITHUB_ENV

      - name: Compare CMakeList.txt Version
        if: ${{ env.cmakelists_version != needs.check_changelog.outputs.next_version_bare }}
        run: |
          echo CMakeLists version: "$cmakelists_version"
          echo Changelog version: "${{ needs.check_changelog.outputs.next_version_bare }}"
          echo Within 'CMakeLists.txt' change "project(Sunshine VERSION $cmakelists_version)" to "project(Sunshine VERSION ${{ needs.check_changelog.outputs.next_version_bare }})"
          exit 1

  build_appimage:
    name: AppImage
    runs-on: ubuntu-20.04
    needs: check_changelog
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Dependencies AppImage
        run: |
          sudo apt-get update -y && \
          sudo apt-get --reinstall install -y \
          git wget gcc-10 g++-10 build-essential cmake libssl-dev libavdevice-dev libboost-thread-dev libboost-filesystem-dev libboost-log-dev libpulse-dev libopus-dev libxtst-dev libx11-dev libxrandr-dev libxfixes-dev libevdev-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libdrm-dev libcap-dev libwayland-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
          sudo wget https://developer.download.nvidia.com/compute/cuda/11.4.2/local_installers/cuda_11.4.2_470.57.02_linux.run --progress=bar:force:noscroll -q --show-progress -O /root/cuda.run && sudo chmod a+x /root/cuda.run
          sudo /root/cuda.run --silent --toolkit --toolkitpath=/usr --no-opengl-libs --no-man-page --no-drm && sudo rm /root/cuda.run
          sudo add-apt-repository ppa:savoury1/graphics -y
          sudo add-apt-repository ppa:savoury1/multimedia -y
          sudo add-apt-repository ppa:savoury1/ffmpeg4 -y
          sudo apt-get update -y
          sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y
          sudo apt-get install ffmpeg -y

      - name: Build AppImage
        run: |
          CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Release}"
          SUNSHINE_EXECUTABLE_PATH="${SUNSHINE_EXECUTABLE_PATH:-/usr/bin/sunshine}"
          SUNSHINE_ASSETS_DIR="${SUNSHINE_ASSETS_DIR:-sunshine.AppImage.config}"

          SUNSHINE_ENABLE_WAYLAND=${SUNSHINE_ENABLE_WAYLAND:-ON}
          SUNSHINE_ENABLE_X11=${SUNSHINE_ENABLE_X11:-ON}
          SUNSHINE_ENABLE_DRM=${SUNSHINE_ENABLE_DRM:-ON}
          SUNSHINE_ENABLE_CUDA=${SUNSHINE_ENABLE_CUDA:-ON}

          mkdir -p appimage-build && cd appimage-build

          cmake "-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE" "-DSUNSHINE_EXECUTABLE_PATH=$SUNSHINE_EXECUTABLE_PATH" "-DSUNSHINE_ASSETS_DIR=$SUNSHINE_ASSETS_DIR" "-DSUNSHINE_ENABLE_WAYLAND=$SUNSHINE_ENABLE_WAYLAND" "-DSUNSHINE_ENABLE_X11=$SUNSHINE_ENABLE_X11" "-DSUNSHINE_ENABLE_DRM=$SUNSHINE_ENABLE_DRM" "-DSUNSHINE_ENABLE_CUDA=$SUNSHINE_ENABLE_CUDA" "../" -DCMAKE_INSTALL_PREFIX=/usr
          make -j ${nproc} DESTDIR=AppDir

      - name: Set AppImage Version
        if: ${{ needs.check_changelog.outputs.next_version_bare != needs.check_changelog.outputs.latest_version }}
        run: |
          version=${{ needs.check_changelog.outputs.next_version_bare }}
          echo "VERSION=${version}" >> $GITHUB_ENV

      - name: Package AppImage
        # https://docs.appimage.org/packaging-guide/index.html
        run: |
          mkdir -p artifacts
          mkdir -p appimage_temp && cd appimage_temp

          DESKTOP_FILE="${DESKTOP_FILE:-sunshine.desktop}"
          ICON_FILE="${ICON_FILE:-sunshine.png}"
          CONFIG_DIR="${CONFIG_DIR:-sunshine/sunshine.AppImage.config/}"
          HOME_DIR="${HOME_DIR:-sunshine/sunshine.AppImage.home/}"

          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage && chmod +x linuxdeploy-x86_64.AppImage

          ./linuxdeploy-x86_64.AppImage --appdir ../AppDir -e ../appimage-build/sunshine -i "../$ICON_FILE" -d "../appimage-build/$DESKTOP_FILE" --output appimage

          mv sunshine*.AppImage sunshine.AppImage
          mkdir sunshine && mv sunshine.AppImage sunshine/
          ./sunshine/sunshine.AppImage --appimage-portable-config
          ./sunshine/sunshine.AppImage --appimage-portable-home
          cp -r ../assets/* "$CONFIG_DIR"
          rm -f "$CONFIG_DIR"/apps_windows.json
          mkdir -p ./"$HOME_DIR"/.config/"$CONFIG_DIR"
          cp ./"$CONFIG_DIR"/apps_linux.json ./"$HOME_DIR"/.config/"$CONFIG_DIR"
          zip -r ./sunshine-appimage.zip ./sunshine/*

          mv sunshine-appimage.zip ../artifacts/

      - name: Verify AppImage
        run: |
          cd appimage_temp
          wget https://github.com/TheAssassin/appimagelint/releases/download/continuous/appimagelint-x86_64.AppImage && chmod +x appimagelint-x86_64.AppImage && ./appimagelint-x86_64.AppImage ./sunshine/sunshine.AppImage

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3
        with:
          name: sunshine-appimage
          path: artifacts/

      - name: Create Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: SunshineStream/actions/create_release@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          next_version: ${{ needs.check_changelog.outputs.next_version }}
          last_version: ${{ needs.check_changelog.outputs.last_version }}
          release_body: ${{ needs.check_changelog.outputs.release_body }}

  build_linux:
    name: Linux
    runs-on: ubuntu-20.04
    needs: check_changelog
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Dependencies Linux
        run: |
          mkdir -p artifacts
          sudo apt-get update -y && \
          sudo apt-get --reinstall install -y \
          git wget gcc-10 g++-10 build-essential cmake libssl-dev libavdevice-dev libboost-thread-dev libboost-filesystem-dev libboost-log-dev libpulse-dev libopus-dev libxtst-dev libx11-dev libxrandr-dev libxfixes-dev libevdev-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libdrm-dev libcap-dev libwayland-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
          sudo wget https://developer.download.nvidia.com/compute/cuda/11.4.2/local_installers/cuda_11.4.2_470.57.02_linux.run --progress=bar:force:noscroll -q --show-progress -O /root/cuda.run && sudo chmod a+x /root/cuda.run
          sudo /root/cuda.run --silent --toolkit --toolkitpath=/usr --no-opengl-libs --no-man-page --no-drm && sudo rm /root/cuda.run
          sudo add-apt-repository ppa:savoury1/graphics -y
          sudo add-apt-repository ppa:savoury1/multimedia -y
          sudo add-apt-repository ppa:savoury1/ffmpeg4 -y
          sudo apt-get update -y
          sudo apt-get upgrade -y && sudo apt-get dist-upgrade -y
          sudo apt-get install ffmpeg -y

      - name: Build Linux
        run: |
          CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Release}"
          SUNSHINE_EXECUTABLE_PATH="${SUNSHINE_EXECUTABLE_PATH:-/usr/bin/sunshine}"
          SUNSHINE_ENABLE_WAYLAND=${SUNSHINE_ENABLE_WAYLAND:-ON}
          SUNSHINE_ENABLE_X11=${SUNSHINE_ENABLE_X11:-ON}
          SUNSHINE_ENABLE_DRM=${SUNSHINE_ENABLE_DRM:-ON}
          SUNSHINE_ENABLE_CUDA=${SUNSHINE_ENABLE_CUDA:-ON}
          SUNSHINE_CONFIG_DIR=${SUNSHINE_CONFIG_DIR:-.}
          
          mkdir -p build 
          mkdir -p artifacts
          
          cd build
          cmake "-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE" "-DSUNSHINE_CONFIG_DIR=$SUNSHINE_CONFIG_DIR" "-DSUNSHINE_EXECUTABLE_PATH=$SUNSHINE_EXECUTABLE_PATH" "-DSUNSHINE_ASSETS_DIR=$SUNSHINE_ASSETS_DIR" "-DSUNSHINE_ENABLE_WAYLAND=$SUNSHINE_ENABLE_WAYLAND" "-DSUNSHINE_ENABLE_X11=$SUNSHINE_ENABLE_X11" "-DSUNSHINE_ENABLE_DRM=$SUNSHINE_ENABLE_DRM" "-DSUNSHINE_ENABLE_CUDA=$SUNSHINE_ENABLE_CUDA" "../" -DCMAKE_INSTALL_PREFIX=/usr

      - name: Package Linux
        run: |
          cd build

          # package
          cpack -G DEB
          cpack -G RPM

          # move
          mv Sunshine.deb ../artifacts/sunshine.deb
          mv Sunshine.rpm ../artifacts/sunshine.rpm

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'  }}
        uses: actions/upload-artifact@v3
        with:
          name: sunshine-linux
          path: artifacts/
      - name: Create Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: SunshineStream/actions/create_release@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          next_version: ${{ needs.check_changelog.outputs.next_version }}
          last_version: ${{ needs.check_changelog.outputs.last_version }}
          release_body: ${{ needs.check_changelog.outputs.release_body }}

  build_mac:
    name: MacOS
    runs-on: macos-11
    needs: check_changelog

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Dependencies MacOS
        run: |
          # install dependencies using homebrew
          brew install boost cmake ffmpeg opus

          # fix openssl header not found
          cd /usr/local/include
          ln -s ../opt/openssl/include/openssl .

      - name: Build MacOS
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DSUNSHINE_ASSETS_DIR=assets ..
          make -j ${nproc}

      - name: Package MacOS
        run: |
          mkdir -p artifacts
          cd build

          # package
          cpack -G BUNDLE
          cpack -G DMG

          # move
          mv Sunshine.bundle ../artifacts/sunshine-macos.bundle
          mv Sunshine.dmg ../artifacts/sunshine-macos.dmg

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3
        with:
          name: sunshine-macos
          path: artifacts/

      - name: Create Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: SunshineStream/actions/create_release@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          next_version: ${{ needs.check_changelog.outputs.next_version }}
          last_version: ${{ needs.check_changelog.outputs.last_version }}
          release_body: ${{ needs.check_changelog.outputs.release_body }}

  build_win:
    name: Windows
    runs-on: windows-2019
    needs: check_changelog

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Dependencies Windows
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            diffutils
            git
            make
            mingw-w64-x86_64-binutils
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-nsis
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-opus
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-x265
            nasm
            yasm

      - name: Build Windows
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DSUNSHINE_ASSETS_DIR=assets -G "MinGW Makefiles" ..
          mingw32-make -j2

      - name: Package Windows
        shell: msys2 {0}
        run: |
          mkdir -p artifacts
          cd build

          # package
          cpack -G NSIS 
          cpack -G ZIP

          # move
          mv Sunshine.exe ../artifacts/sunshine-windows-installer.exe
          mv Sunshine.zip ../artifacts/sunshine-windows-standalone.zip

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3
        with:
          name: sunshine-windows
          path: artifacts/

      - name: Create Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: SunshineStream/actions/create_release@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          next_version: ${{ needs.check_changelog.outputs.next_version }}
          last_version: ${{ needs.check_changelog.outputs.last_version }}
          release_body: ${{ needs.check_changelog.outputs.release_body }}
